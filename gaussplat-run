#!/bin/bash
source gaussplat-env

usage () {
    echo "Usage: $0"
    echo "Example: $0"
}
msg () { 
    echo "\e[1;36m$1\e[0m"
}
# named array for timings
declare -A TIMINGS
time_start () {
    # $1 is the name of the timer
    TIMINGS[$1]=$(date +%s%N)
}
time_stop () {
    # $1 is the name of the timer
    local time_end=$(date +%s%N)
    local time_diff=$(( $time_end - ${TIMINGS[$1]} ))
    local time_diff_sec=$(echo "scale=2; $time_diff / 1000000000" | bc)
    return $time_diff_sec
}

# if tasks dir doesn't exist yet, make it
[ ! -d tasks ] && mkdir tasks

# check that the video-dir exists
[ ! -d $VIDEO_DIR ] && echo "Video dir $VIDEO_DIR not found" && exit 1

# check that the task name is not already in use
[ -d tasks/$NAME ] && echo "task $NAME already exists" && exit 1

# check that the scratch dir exists on hpc
if [[ $(ssh $VSCUSER@login.hpc.ugent.be "if [ ! -d ~/scratch ]; then echo 1; else echo 0; fi") == 1 ]]; then
    echo "Directory ~/scratch does not exist on hpc"
    exit 1
fi


msg "Initializing (local) task $NAME..."
    mkdir tasks/$NAME
    cp gaussplat-env tasks/$NAME/gaussplat-env
    cp gaussplat-job tasks/$NAME/gaussplat-job
    cp -r $VIDEO_DIR tasks/$NAME/data


cd tasks/$NAME


msg "Initializing (hpc) task $NAME..."
    # create the task directory on hpc
    ssh -i ~/.ssh/id_rsa $VSCUSER@login.hpc.ugent.be "mkdir -p ~/scratch/tasks/$NAME"
    # send the files to hpc
    scp -i ~/.ssh/id_rsa gaussplat-env $HPC:~/scratch/tasks/$NAME/gaussplat-env
    scp -i ~/.ssh/id_rsa gaussplat-job $HPC:~/scratch/tasks/$NAME/gaussplat-job
    # todo: change this scp with multiple download links, 
    #       place the links in a .txt file
    #       in the data dir in the dataset on gdrive
    #       => way faster to download instead scp (upload + download)
    scp -r -i ~/.ssh/id_rsa data $HPC:~/scratch/tasks/$NAME/data

# submit the job on hpc
ssh $VSCUSER@login.hpc.ugent.be << EOF
    cd ~/scratch/tasks/$NAME
    module swap cluster/accelgor
    qsub run-task > jobid.txt
    echo "Job created with id: \$(cat jobid.txt)"
EOF


# TODO:
# - add params to qsub
# - add logging for timing seperated parts of the script
